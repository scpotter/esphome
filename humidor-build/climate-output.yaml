### Climate Output: PWM Fan using LEDC #############################
#
#  PWM signal output that directly drives the fan. Can be set as 0-100.
output:
  - platform: ledc
    pin: "${Pin_Fan_PWMinput}"
    id: humidor_fan_output
    frequency: "25000 Hz"   # Noctua lists 25KHz as target, 21-28k acceptable
    min_power: 9%           # 7% does nothing, 9% does. Not sure of 8%
    zero_means_zero: true   # At 0, actually turn fan off
#
# Proxy syncing the PWM percent  multiple inputs/outputs for the PWM signal.
#   Set by either PID or manual control. Manual input overrides PID.
#   Publishes fan output to ledc (PWM) which drives the fan and to a sensor for HA. Note these use different units.
  - platform: template
    id: proxy_fan_output
    type: float
    write_action:
      lambda: |-
        float write_val = 
          (id(manual_fan_control).state) ?
            id(manual_fan_control).speed / 100.0 : state*1.0;
        id(humidor_fan_output).set_level(write_val);
        id(display_fan_output).publish_state(write_val*100.0);
#
# Optional control hidden from HA by default
# Manual fan control for on/off and speed%. Useful for testing.
# Over-rides control set by the PID
fan:
  - platform: speed
    id: manual_fan_control
    # name: "${device_namelabel} Fan"  # remove comment to enable on the front end
    output: proxy_fan_output
#
sensor:
# Expose proxy_fan_output as a fan to HA
  - platform: template
    name: "${device_namelabel} Fan Output"
    id: display_fan_output
    unit_of_measurement: "%"
# Expose Fan RPM (Tachometer) to HA
    # Secondary to  add Useful for May not be meaningfully different from PWM input besides troubleshooting
  - platform: pulse_counter
    pin: 
      number: ${Pin_Fan_RPMoutput}
      mode: INPUT_PULLUP
    name: "$device_namelabel Fan RPM"
    unit_of_measurement: 'RPM'
    accuracy_decimals: 0
    # Noctua fans send two pulses per revolution
    # Filter divides the pulse count in half to get one pulse per revolution
    filters:
      - multiply: 0.5  